<h1>Views</h1>

<p>Views determine the layout of an interface. They are basically templates with placeholders for data. The common usage is to have all your HTML code in the template. This allows you to change the appearance and layout of a page without needing to update the application code, and vice versa.</p>


<h2>EJS</h2>
<p>In appDev, the default template engine is EJS (Embedded JavaScript). An EJS template is typically all HTML (and sometimes CSS), except with special <samp>&lt;%  %&gt;</samp> tags. Anything inside those tags is interpreted as Javascript code. To output the value of a Javascript variable, use the <samp>&lt;%-  %&gt;</samp> tags, or the <samp>&lt;%=  %&gt;</samp> tags. They both just echo the evaluated value of whatever is inside, except the second one (<samp>=</samp>) escapes any HTML. Meaning, the <samp>&lt;</samp> symbol becomes <samp>&amp;lt;</samp> and so on.</p>


<h2>Express</h2>
<p><i>Express</i> has a built-in routine for serving up HTTP responses using templates. You call <samp>res.render( <i>[templateFilePath]</i>, <i>[params]</i> )</samp>. Params is an object whose attributes will be made available in the template as local variables. For example, in the application code:
<pre>
    var params = {
        'name': 'lancelot',
        'quest': 'to seek the holy grail',
        'color': 'blue'
    };
    res.render( 'myTemplate.ejs', params );
</pre>
And in the template:
<pre>
    &lt;p&gt; I am <i>&lt;%= name %&gt;</i>. My quest is <i>&lt;%= quest %&gt;</i>. My favorite color is <i>&lt;%= color %&gt;</i>. &lt;/p&gt;
</pre>
</p>

<p>NOTE: Express assumes that you have yet another template, called <samp>views/layout.ejs</samp>. It will take the output of your first specified template, and put that into the layout.ejs as a variable called <samp>body</samp>. This is useful for factoring all the repetitive outer layout stuff out of your many content templates, and into one common layout.ejs file. To override this, specify <samp>layout: false</samp> as one of the properties of your <samp>params</samp> object.</p>


<h2>EJS Manually</h2>

<p>Express' render() function will always send the output straight to the client. But what if you want to capture a template's output into a string? Then you should bypass Express and use EJS directly.</p>

<p><pre class="code-explain">
var templateStr = <b>fs</b>.readFileSync('myTemplate.ejs', <span> 'utf8' <div class="caption">You MUST specify this, otherwise readFile() will return a buffer object instead of a string.</div></span>);
var params = {
    <span> 'locals': {<div class="caption">Variables to be passed into the template must go inside this <samp>locals</samp> object.</div></span>
        'name': 'lancelot',
        'quest': 'to seek the holy grail',
        'color': 'blue'
    }
};
var finalOutput = <b>ejs</b>.render(templateStr, params);
</pre></p>



<h2>appDev</h2>

<p>In our framework, we have a globally available function <samp>AD.App.Page.returnPage(req, res)</samp> defined. This renders the content and puts it inside an overall site layout wrapper, then sends it to the client. This means that anything you render in this way will follow a consistent style and conform to the selected site theme.</p>

<p>Our template uses <samp>layout.ejs</samp> to provide the basic setup for the page (including any .css, .js, etc.) then displays the content generated by the application. The <samp>siteContent.ejs</samp> template is to be used for theming applications</p>

